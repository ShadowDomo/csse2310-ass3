#include "path.h"



/** Allocates the path from the given file **/
Path *allocate_path(FILE *file) {
    // TODO arrange in order of smallest player-id furthest from path
    Path *path = malloc(sizeof(Path));
    char *line = read_line(file);

    // get number of stops
    int numberOfStops = line[0] - '0';
    path->size = numberOfStops;

    // make a list of sites with length of the number of stops
    Site *sites = malloc(sizeof(Site) * path->size);

    for (int siteNum = 0; siteNum < numberOfStops; ++siteNum) {
        // break up into each site

        // already checked first few chars
        char string[4];
        snprintf(string, 4, "%s", &line[2 + 3 * siteNum]);

        // get site type and its value
        char type[3];
        snprintf(type, 3, "%s", string);
        sites[siteNum].type = strdup(type);

        if (strcmp(sites[siteNum].type, "::") == 0) {
            sites[siteNum].playerLimit = -1;
        } else {
            sites[siteNum].playerLimit = string[2] - '0';
        }
    }

    path->sites = sites;
    path->playersInGame = 0;
    return path;
}

/** Handles human user input
 *
 * @param grid The game board
 * @return String of characters inputted by user
 * @exit code 5 if EOF encountered
 */
char *handle_user_input() {
    printf("Steps: ");
    char *result = malloc(sizeof(char) * 1);
    int position = 0;
    int next = 0;
    int length = 0;

    while (true) {
        next = fgetc(stdin);
        if (next == EOF) {
            fprintf(stderr, "End of file\n");
//            exit(END_OF_FILE);
        } else if (next == '\n') {
            result[position] = '\0';
            break;
        } else {
            length += 1;
            result = realloc(result, (length + 1) * sizeof(char));
            result[position++] = (char) next;
        }
    }

    return result;
}

// returns int of whatever they inputted
int get_input() {
    int row;

    while (true) {
        char *result = handle_user_input();

        // for save game
        if (result[0] == 's' && strlen(result) != 1) {
            char filename[80];
            sscanf(result + 1, "%s", filename);
//            save_game(grid, filename, grid->currentPlayer);
        } else if (sscanf(result, "%d", &row) == 1) {
            break;
        }
    }
    return row;
//    if (!place_move(grid, row, column, grid->currentPlayer)) {
//        grid->currentPlayer = next_player(grid->currentPlayer);
//        draw_grid(grid, stdout);
//    }
}



/** Displays the path to stdout **/
void print_path(Path *path) {
    Player **players = path->players;
    int numLines = 0;
    // for each site
    for (int sitenum = 0; sitenum < path->size; ++sitenum) {
        Site site = path->sites[sitenum];
        printf("%s ", site.type);

        // find out how many lines we need to display
        if (site.numPlayersCurrently > numLines) {
            numLines = site.numPlayersCurrently;
        }
    }

    char **lines = make_empty_strings(numLines, path->size);

    // printing player positions below the path
    for (int siteNumber = 0; siteNumber < path->size; ++siteNumber) {
        Site site = path->sites[siteNumber];

        int printed = 0;

        int lastPrintedPos = 0;
        int playerWithLowest = -1;

        while (printed < site.numPlayersCurrently) {
            int lowestPosition = 9999;

            for (int player = 0; player < path->playersInGame; ++player) {
                if (players[player]->siteNumber == siteNumber) {
                    if (players[player]->position < lowestPosition &&
                            players[player]->position > lastPrintedPos) {
                        lowestPosition = players[player]->position;
                        playerWithLowest = player;
                    }
                }
            }

            for (int j = 0; j < numLines; ++j) {

                // if the space hasn't been printed to
                if (lines[j][3 * siteNumber] == ' ') {

                    lines[j][3 * siteNumber] = playerWithLowest + '0';
                    printed += 1;
                    lastPrintedPos = lowestPosition;
                    break;
                }

            }
        }


    }

    // display lines
    for (int line = 0; line < numLines; ++line) {
        printf("\n%s", lines[line]);
    }
}


/** Initialises and returns a player **/
Player *init_player(Path *path, int ID) {
    Player *player = malloc(sizeof(Player));
    player->ID = ID;
    player->money = 7;
    player->countV1 = 0;
    player->countV2 = 0;
    player->siteNumber = 0;
    player->points = 0;

    // init cards
    Cards cards = {0, 0, 0, 0, 0};
    player->cards = cards;

    path->sites[0].numPlayersCurrently += 1;

    // dynamically increase playerIDs array for each new player
    for (int siteNum = 0; siteNum < path->size; ++siteNum) {
        if (path->playersInGame == 0) {
            path->sites[siteNum].playerIDs = malloc(sizeof(int));
        } else {
            path->sites[siteNum].playerIDs = realloc(path->sites[siteNum].playerIDs,
                                                     sizeof(int) * path->playersInGame + 1);
        }
    }

    path->playersInGame += 1;

    // ensure the player only exists at one site
    for (int siteNum = 0; siteNum < path->size; ++siteNum) {
        path->sites[siteNum].playerIDs[ID] = 0;
    }

    path->sites[0].playerIDs[ID] = 1;

    player->position = path->sites[0].numPlayersCurrently;

    return player;
}

/** Arranges the order of players initially in order of smallest player
 *  furthest from the path. **/
void arrange_order_of_players(Path *path) {
    Player **players = path->players;
//    int *playerIDs = path->sites[0].playerIDs;
    int countPlayers = path->sites[0].numPlayersCurrently;

    for (int player = 0; player < countPlayers; ++player) {
        players[player]->position = -1 * (players[player]->ID - countPlayers);
//        printf("%d\n", players[player]->position);
    }

}

/** Returns the ID of the player who has the highest score in the current
 * site.
 */
int get_highest_score(Path *path, int sideNum) {
    int highestScore = 0;
    int playerIdwithHS = -1;

    for (int i = 0; i < path->playersInGame; ++i) {
        // if the player is at the site
        if (path->players[i]->siteNumber == sideNum) {
            if (path->players[i]->position > highestScore) {
                highestScore = path->players[i]->position;
                playerIdwithHS = i;
            }
        }
    }

    return playerIdwithHS;
}

/** Returns the ID of the next player to make a move. **/
int next_player_to_move(Path *path) {
    Site *sites = path->sites;

    for (int i = 0; i < path->size; ++i) {
        if (sites[i].numPlayersCurrently != 0) {
            return get_highest_score(path, i);
        }
    }

}



/** Moves the given player forward the given number of steps. **/
void move_player(Path *path, int playerID, int steps) {
    Player *player = path->players[playerID];
    Site *site = &(path->sites[player->siteNumber]);
    // remove from old site
    site->numPlayersCurrently -= 1;
    site->playerIDs[player->ID] = 0;
    player->siteNumber += steps;

    site = &(path->sites[player->siteNumber]);
    // move to new site
    site->numPlayersCurrently += 1;
    site->playerIDs[player->ID] = 1;

    player->position = site->numPlayersCurrently;

    // recalculate positions TODO do i need?
//    calculate_positions(path->players, path);
}





