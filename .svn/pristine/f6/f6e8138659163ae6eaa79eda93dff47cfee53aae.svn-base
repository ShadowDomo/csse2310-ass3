#include "path.h"

/** Allocates the path from the given file **/
Path *allocate_path(FILE *file, int numPlayers) {

    Path *path = malloc(sizeof(Path));
    char *line = read_line(file);

    // get number of stops
    int numberOfStops = line[0] - '0';
    path->size = numberOfStops;

    // make a list of sites with length of the number of stops
    Site *sites = malloc(sizeof(Site) * path->size);

    for (int siteNum = 0; siteNum < numberOfStops; ++siteNum) {
        // break up into each site
        // test
        char string[4];
        snprintf(string, 4, "%s", &line[2 + 3 * siteNum]);

        // get site type and its value
        char type[3];
        snprintf(type, 3, "%s", string);
        sites[siteNum].type = strdup(type);

        if (strcmp(sites[siteNum].type, "::") == 0) {
            sites[siteNum].playerLimit = -1;
        } else {
            sites[siteNum].playerLimit = string[2] - '0';
        }

        // initialise empty players with id -1
        int *players =  malloc(sizeof(int) * numPlayers);
        for (int player = 0; player < numPlayers; ++player) {
            players[player] = 0;
        }
        sites[siteNum].playerIDs = players;
    }

    path->sites = sites;
    path->playersInGame = numPlayers;
    return path;
}




/** Displays the path to stdout **/
void print_path(Path *path) {
    int numLines = 0;
    // for each site
    for (int sitenum = 0; sitenum < path->size; ++sitenum) {
        Site site = path->sites[sitenum];
        printf("%s ", site.type);

        // find out how many lines we need to display
        if (site.numPlayersCurrently > numLines) {
            numLines = site.numPlayersCurrently;
        }
    }

    // make line strings and set to all spaces
    char **lines = malloc(sizeof(char*) * numLines);
    for (int i = 0; i < numLines; ++i) {
        lines[i] = malloc(sizeof(char)* 3 * path->size + 1);

        for (int j = 0; j < 3 * path->size; ++j) {
            lines[i][j] = ' ';
        }

        lines[i][3 * path->size] = 0;
    }

    // for each site
    for (int sitenum = 0; sitenum < path->size; ++sitenum) {
        Site site = path->sites[sitenum];
        // get the playerIDs at the current site
        int *players = site.playerIDs;

        for (int player = 0; player < path->playersInGame; ++player) {
            // if the site contains the player
            if (players[player] == 1) {
                for (int j = 0; j < numLines; ++j) {
                    if (lines[j][3 * sitenum] == ' ') {
                        lines[j][3 * sitenum] = player + '0';
                        break;
                    }
                }
//                printf("\n");
//                    printf("   ");

//                printf("%d", player);
            }
        }
    }
//    printf("\n");


//    lines[1][5] = 'c';
    for (int line = 0; line < numLines; ++line) {
        printf("\n%s", lines[line]);
    }




}






