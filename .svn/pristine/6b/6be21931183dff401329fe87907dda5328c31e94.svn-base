#ifndef PATH_H
#define PATH_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "util.h"
#include "deck.h"

#define Mo "Mo"
#define V1 "V1"
#define V2 "V2"
#define Do "Do"
#define Ri "Ri"
#define Barrier "::"


/** Represents a collection of cards. **/
typedef struct Cards {
    // how many the player has collected
    int A;
    int B;
    int C;
    int D;
    int E;
} Cards;


/** Represents a player in the game. **/
typedef struct Player {
    // how much money the player has
    int money;

    // the player ID
    int ID;

    // which site the player is at
    int siteNumber;

    // how many times the player has visited the sites
    int countV1;
    int countV2;

    // the player's points
    int points;

    // the cards the player has collected
    Cards *cards;

    // the players position relative to the rest of the players
    // eg for 5 players, 0 means the player is in the front
    // 4 means the player is last so their move is next
    int position;
} Player;

/** A single site.
 */
typedef struct Site {
    // type of site
    char *type;

    // max number of players the site can have
    int playerLimit;

    // array of playerIDs.
    int *playerIDs;

    // the number of players currently at the site
    int numPlayersCurrently;
} Site;

/** Represents the game path.
 */
typedef struct Path {
    // size of the path
    int size;

    // the number of players in the game
    int playersInGame;

    // array of sites on the path
    Site *sites;

    // array of player pointers
    Player **players;

    Deck *deck;
} Path;
int next_player_to_move(Path *path);

int find_next_barrier(Path *path, int currentSiteID);
int player_A_next_move(Path *path, int playerID);
int get_input();

void start_player_A(int numPlayers, int ID);
char *handle_user_input();
int do_action(Path *path, int playerID);
int get_highest_score(Path *path, int sideNum);
double calculate_position(int siteNum, int numPlayers);
void print_path(Path *path);
Path *allocate_path(char *line);

Player *init_player(Path *path, int ID);
void move_player(Path *path, int playerID, int steps);

void arrange_order_of_players(Path *path);
int next_player_to_move(Path *path);
#endif