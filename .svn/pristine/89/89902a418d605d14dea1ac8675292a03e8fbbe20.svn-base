#include "player.h"

/** Initialises and returns a player **/
Player *init_player(Path *path, int ID) {
    Player *player = malloc(sizeof(Player));
    player->ID = ID;
    player->money = 7;
    player->countV1 = 0;
    player->countV2 = 0;
    player->siteNumber = 0;
    player->points = 0;

    // init cards
    Cards cards = {0, 0, 0, 0, 0};
    player->cards = cards;

    path->sites[0].numPlayersCurrently += 1;

    path->playersInGame += 1;
    for (int siteNum = 0; siteNum < path->size; ++siteNum) {
        if (path->playersInGame == 0) {
            path->sites[siteNum].playerIDs = malloc(sizeof(int));

        } else {
            path->sites[siteNum].playerIDs = realloc(path->sites[siteNum].playerIDs,
                    sizeof(int) * path->playersInGame + 1);

            // realloc?
        }


        // initialise empty players with id -1

        for (int playerID = 0; playerID < path->playersInGame; ++playerID) {
            path->sites[siteNum].playerIDs[playerID] = 0;
        }

    }

    path->sites[0].playerIDs[ID] = 1;

    return player;
}

/** Arrange the order of players initially in order of smallest player
 *  furthest from the path. **/
void arrange_order_of_players(Player **players, Path *path) {
    int *playerIDs = path->sites[0].playerIDs;
    int countPlayers = path->sites[0].numPlayersCurrently;




}



/** Returns the next player to make a move. **/
Player *next_player_to_move(Path *path) {


}

/** Moves the given player forward the given number of steps. **/
void move_player(Path *path, Player *player, int steps) {
    path->sites[player->siteNumber].numPlayersCurrently -= 1;
    path->sites[player->siteNumber].playerIDs[player->ID] = 0;
    player->siteNumber += steps;
    path->sites[player->siteNumber].numPlayersCurrently += 1;
    path->sites[player->siteNumber].playerIDs[player->ID] = 1;
}