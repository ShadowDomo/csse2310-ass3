#include "2310A.h"

int child_setup(int sendPipe[2], int receivePipe[2], char **args) {
    // write 2310A's stdout into pipe
    dup2(sendPipe[WRITE_END], STDOUT_FILENO);
    close(sendPipe[WRITE_END]);
    close(sendPipe[READ_END]);

    // 2310A reads from pipe2
    dup2(receivePipe[READ_END], STDIN_FILENO);
    close(receivePipe[READ_END]);
    close(receivePipe[WRITE_END]);

    // suppress stderr
    int sink = fileno(fopen("/dev/null", "w"));
    dup2(sink, STDERR_FILENO);

    // TODO fix
    execl(args[0], args[0], args[1], args[2], NULL);
}


/** Dealer program. **/
int main(int argc, char **argv) {

    // suppose correct
    char *deckFileName = argv[1];
    char *mapFileName = argv[2];

    // first three args are not players
    int numPlayers = argc - 3;

    // do initialisation
    char *givenPath = read_line(fopen(mapFileName, "r"));
    Path *path = allocate_path(givenPath, numPlayers);
    path->players = malloc(sizeof(Player*) * numPlayers);
    path->deck = allocate_deck(fopen(deckFileName, "r"));

    for (int i = 0; i < numPlayers; ++i) {
        path->players[i] = init_player(path, i);
        // make pipes
        pipe(path->players[i]->sendPipes);
        pipe(path->players[i]->receivePipes);
    }
    arrange_order_of_players(path);

    int fd[2];
    int fdagain[2];
    pipe(fd);
    pipe(fdagain);
//    fork();
    int cPID = fork();
    char childArgsNumPlayers[2];
    char childArgsID[2];
    snprintf(childArgsNumPlayers, 2, "%d", numPlayers);
    char *childArgs[] = {argv[3], argv[3], childArgsNumPlayers , "0"};

    // if child
    if (cPID == 0) {
        for (int i = 1; i < numPlayers; ++i) {
            // we are another clone
            if (fork() == 0){
                snprintf(childArgsID, 2, "%d", i);
                char *childArgsTemp[] = {argv[i + 3], argv[i + 3], childArgsNumPlayers, childArgsID};
                child_setup(path->players[i]->sendPipes, path->players[i]->receivePipes, childArgsTemp);
            } else {

            }
        }

        child_setup(fd, fdagain, childArgs);
    } else {
        // 2310A's stdout should only be Do's and a ^
        close(fd[WRITE_END]);
        close(fdagain[READ_END]);

        // write to this to talk to player
        FILE *writer = fdopen(fdagain[WRITE_END], "w");

        // read from this to read from player
        FILE *fp = fdopen(fd[READ_END], "r");

        // need to adapt for multiple players todo
        char carat = fgetc(fp);
        if (carat == '^') {
//            printf("done\n");
            fprintf(writer, "%s\n", givenPath);
            fflush(writer);
        }

        start_dealer(path, fp, writer);



    }



}
